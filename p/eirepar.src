/*
**  This archive is part of the program EI
**  (C) Copyright 1995-2001 Gary King
**  All Rights Reserved.
**
**  various reparameterization procs
*/
/*
** {bb,bw,sb,sw,rho} = eirepar(params,Zb,Zw,x);
** 
** INPUTS: 
** params = params in scale of estimation (eta's at end)
** Zb,Zw = covariates (without constant term) or scalar 1
** x = aggregate-level classifying variable
** 
** OUTPUTS: on untruncated normal scale
** bb,bw = Px1 vectors of precinct means
** sb,sw = 1x1 standard deviations
** rho   = correlation 
**
** reparametrization from scale of estimation
** to the untruncated scale.  (see eirepart.g for truncated scale)
*/
#include ei.ext;
proc 5=eirepar(b,Zb,Zw,x);
  local bb0,bw0,sb0,sw0,rho0,sb,sw,bb,bw,rho,pb,m,o,Bb0v,Bw0v,
  etaB,etaW,r;
  
  /* pluck off params */
  o=ones(rows(x),1);

  Bb0=b[1:_Ez[1]];
  if _Ez[1]==1;
    Bb0v=0;
  else;
    Bb0v=trimr(Bb0,1,0);  @ vector of params for mean-adjusted Zb @
  endif;
  Bb0=Bb0[1]*o;		  @ constant term @
  
  Bw0=b[_Ez[1]+1:sumc(_Ez)];
  if _Ez[2]==1;
    Bw0v=0;
  else;
    Bw0v=trimr(Bw0,1,0);  @ vector of params for mean-adjusted Zw @
  endif;
  Bw0=Bw0[1]*o;		  @ constant term @
    
  r=rows(b);
  sb0=b[r-4];
  sw0=b[r-3];
  rho0=b[r-2];
  etaB=b[r-1];
  etaW=b[r];

  /* reparameterize */
  sb=exp(sb0);
  sw=exp(sw0);

  m=x-meanc(x);
  @
  if ismiss(_eiread_zb);
    Zb=Zb-meanc(Zb)';
  endif;
  if ismiss(_eiread_zw);
    Zw=Zw-meanc(Zw)';
  endif;
  @
  Zb=Zb-meanc(Zb)';
  Zw=Zw-meanc(Zw)';
  
  Bb=Bb0*(0.25+sb^2)+0.5+(Zb*Bb0v+etaB*m);
  Bw=Bw0*(0.25+sw^2)+0.5+(Zw*Bw0v+etaW*m);
  
  rho=fisherzi(rho0);

  retp(Bb,Bw,sb,sw,rho);
endp;

/* ----------------------------------------------------------------
  b = EireparT(params,Zb,Zw,x);
**
**  reparameterization to the ultimate Truncated scale of E() and V() of
**  the precinct parameters  (see eirepar() for the intermediate 
**  parameterization)
**
** params = bb|bw|sb|sw|rho|etaB|etaW (untruncated)
**  b     = bb|bw|sb|sw|rho (truncated)
**
** uses 100*_Esims simulations for computations
*/
proc eirepart(params,Zb,Zw,x);
  local sims,bb,bw,sb,sw,sbw,rho,sb2,sw2,vrs,b,t,vc,mu,r,m,bbsims,bwsims,o,
  bounds,v;

  {bb,bw,sb,sw,rho} = eirepar(params,Zb,Zw,x);
  bb=meanc(bb);
  bw=meanc(bw);
  sims=_Esims*100;

  let bounds[2,2]=0 1 0 1;
  b=rndbtn(bb,bw,sb,sw,rho,bounds,sims);

  t=corrx(b);
  b=meanc(b)|stdc(b)|t[2,1];

  retp(b);
endp;

/* ----------------------------------------------------------------
   y = eireparinv(params);
**
** Invert reparametrization to scale of estimation
** from untruncated scale. 5 parameters only.
** Can be used to ease setting of starting values, which must be in
** scale of estimation.
*/
proc eireparinv(b);
  local sb,sw,bb,bw,rho,p1,p2,p3,p4,p5;
  bb=b[1];
  bw=b[2];
  sb=b[3];
  sw=b[4];
  rho=b[5];
  
  p1=(bb-0.5)/(sb^2+0.25);
  p2=(bw-0.5)/(sw^2+0.25);
  p3=ln(sb);
  p4=ln(sw);
  p5=fisherz(rho);

  retp(p1|p2|p3|p4|p5);
endp;
