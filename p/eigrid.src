/*  
**  This archive is part of the program EI
**  (C) Copyright 1995-2001 Gary King
**  All Rights Reserved.
**
**  Grid search procedures
**  by Eric Dickson & Gary King
**
**  {b,logl}=eigrid(dataset,gridlohi,gridline,toler);
**
**  INPUTS:
**
**  dataset = input to loglik proc defined as required by CML
**        (loglik must be called eiloglik(b,dataset) and defined separately)
**
**  gridlohi = k x 2 vector.  Columns designate lower~upper bounds of the
**           search region scale of estimation for each of the parameters.
**           In EI, _cml_bounds, as constructed by _Ebounds, is used.
**           To hold a parameter fixed, set both entries equal to each other.
**
**  gridline = scalar; number of gridlines to compute per dimension.
**             Is a constant for all dimensions over which variation
**             is desired.   So far only 3 and 5 have been tested.
**
**  toler = scalar, specifies the accuracy to which the 
**          optimal gridpoint must be calculated.  Once we have
**          zoomed in sufficiently, and the gridlines are within
**          toler of one another, the routine ceases.
**
**  OUTPUTS:
**
**  b = the gridpoint at which the log-likelihood function is maximized.
**      It is a kx1 vector.
**
**  logl = the value of the log-likelihood function at b.
*/

#include ei.ext;
proc 2=eigrid(dataset,gridlohi,gridline,toler);
  local vars,stval,stb,t,bb,bw,sb,sbw,sw,vc,bnds,nbnds,tdiag,logl,
  b,tt1,tt2,tt,vrs,Dvrs,r,rho,pb,grds,se,mask,fmt,eta,
  estvalmx,grid,gridopt,gridvar,ff,jj,k,best,likcol,loglk,grid1ln,
  gridplus,gridope,et1,et2,et3,et4,gridlo,gridhi,rr,
  grid1lo,grid1hi,rrrr,ffff,mm,g1opt,diffgrid,str;

gridlo=gridlohi[.,1];
gridhi=gridlohi[.,2];
str="********************************************************************";

gridvar = gridhi - gridlo;

/* number of zoom-ins to get to _Edirtol level of accuracy */
k = floor((ln(toler/maxc(gridvar)))/(ln(2/(gridline + 1))))+ 1;

grid = makegrid(gridlo,gridhi,gridline)';    /* get initial grid */

/* calculate the likelihood of each grid point */
for j (1,k,1);               /* zoom-in number */
  jj = j;
  str;
  format/ldn 4,0;
  "Beginning zoom-in ";;jj;;" of ";;k;
  rr=cols(grid);
  loglk = zeros(rr,1);
  et1 = hsec;
  for f(1,rr,1);          /* regulates grid-line to be analyzed */
    ff = f;
    if ((jj==1) .and (ff==200));
       et2 = hsec;
       et3 = (et2 - et1)*rr*k/ff;
       format/ldn 1,1;
       "The grid search will end approximately";;
       (et3-(et2-et1))/6000;;" minutes from now (" timestr(0) ")";;
       printfl;
     endif;
    loglk[ff]=sumc(eiloglik(grid[.,ff],dataset));
    
  endfor;

/* Find grid point with highest likelihood and zoom in */
  best = maxindc(loglk);        /* max like row number */
  format/ldn 7,2;
  "Best grid point, loglik: ";;loglk[best];
  gridopt = grid[.,best];
  format/ldn 6,3;
  "Coordinates:             ";;gridopt';
  "Scale explored:          ";;gridvar';
  if jj <= k-1;
     gridvar = gridvar * 2 / (gridline + 1);
     gridhi = gridopt + gridvar/2;
     gridlo = gridopt - gridvar/2;
     diffgrid = (gridvar.<toler);
     for m(1,rows(diffgrid),1);
	 mm = m;
	 if scalone(diffgrid[mm]);
	    gridlo[mm] = (gridlo[mm]+gridhi[mm])/2;
	    gridhi[mm] = gridlo[mm];
         endif;
     endfor;
     grid = makegrid(gridlo,gridhi,gridline)';
  endif;
endfor;
str;

retp(gridopt,loglk[best]);
endp;


/**************************************************************************
**   makegrid.src
**   version of 9 June 1998
**   by Eric S. Dickson
**
**   This proc, given the boundaries and level of detail, produces grids 
**   which are used in EIGRID()
**
**
**          {grid} = makegrid(gridlo,gridhi,gridline);
**
**
**   INPUTS:
**
**   gridlo = _Egridlo, a k x 1 vector analogous to _Estval.  Each entry
**           designates the lower bound of the search region in the
**           scale of estimation for one of the parameters.
**
**   gridhi = _Egridhi, a k x 1 vector analogous to _Estval.  Each entry
**           designates the upper bound of the search region in the
**           scale of estimation for one of the parameters.
**
**     NOTE ON USAGE: If one wishes to hold a particular parameter fixed
**      at a certain value, then one should set gridlo = gridhi for
**      that parameter.
**
**   gridline = _Egrline, the scalar number of gridlines per dimension.
**             Is a constant for all dimensions over which variation
**             is desired.   So far only 3 and 5 have been tested.
**
**   OUTPUTS:
**
**   grid = a matrix whose rows are the various gridpoints.  The order
**          of the columns is the same as the order of the rows in
**          gridlo or gridhi, and cols(grid) = rows(gridlo). 
**          rows(grid) = gridline^(gridrows), where gridrows is the 
**          number of parameters which are varied in the grid search.
**
**   In the following example, gridline = 7, and various variables of
**   interest are labelled:
**
**   gridlo                                                         gridhi 
**        }---->|     *     *     *     *     *     *     *     |<----{   
**                    ^                                   ^  
**                    |                                   |
**                truedown                             trueup
**
**
*************************************************************************/

proc makegrid(gridlo,gridhi,gridline);
local ii,j,kk,l,mm,nn,gridpts,griddiff,gridnums,griddum,gridpack,grid,glo,ghi,
   gridint,gridcut,gridsum,gridrows,trueup,truedown;

glo = gridlo;      /* vector containing lower ranges in scale of estimn */
ghi = gridhi;      /* vector containing upper ranges in scale of estimn */
  j = gridline;    /* the number of gridlines per dimension */
  l = rows(ghi);   /* the number of dimensions */

griddiff = ghi - glo;                /* difference vector: the range */
griddum = (griddiff .ne 0);          /* 1 if ghi /= glo, else 0 */
gridsum = sumc(griddum);             /* how many dim's will be varied */
gridnums = seqa(1,1,rows(griddum));  /* convenient labelling device */
trueup  =  glo+(1/(1+j))*griddiff;   /* vector with highest gridpoint coords */
truedown = ghi-(1/(1+j))*griddiff;   /* vector with lowest gridpoint coords */

/* The way the third (main) if-loop is written at present, it cannot handle 
   gridum = 0 or gridsum = l because of the use of trimr.  I am sure there is
   a more elegant workaround than adding the two additional loops, but these
   work okay for right now.  There is probably also a better way of doing the
   main loop in general, but this is the best I've tried up to now.  */

if gridsum == l;       /* i.e., if we are to vary over ALL dimensions */
  gridpts = zeros(j,l);         
  for k (1,l,1);
    kk = k;
    gridpts[.,kk] = seqase(truedown[kk],trueup[kk],j);
  endfor;
  grid = makefacn(l,gridpts);   /* make the grid, using our points matrix */
endif;

if gridsum == 0;  /* to vary over NO dimensions: i.e., ghi = glo = grid' */
  grid = ghi';
endif;

if gridsum/=0 and gridsum/=l; /* the complicated case where only some vary */
   gridpack = griddum ~ gridnums ~ glo ~ ghi ~ truedown ~ trueup;
   gridpack = sortc(gridpack,1);
   gridcut = gridpack[1:rows(gridpack)-gridsum,2:4];
   gridpack = trimr(gridpack,rows(gridpack)-gridsum,0);
   gridpack = sortc(gridpack,2);
   gridrows = rows(gridpack);
   gridpts = zeros(j,gridrows);
   grid = zeros(j^(gridrows),l);
   
   for i (1,gridrows,1);
      ii = i;
      gridpts[.,ii] = seqase(gridpack[ii,5],gridpack[ii,6],j);
   endfor;

   gridint = makefacn(gridrows,gridpts);

   for m (1,rows(gridcut),1);
      mm = m;
      grid[.,gridcut[mm,1]] = gridcut[mm,2] * ones(rows(grid),1);
   endfor;

   for n (1,gridrows,1);
      nn = n;
      grid[.,gridpack[nn,2]] = gridint[.,nn];
   endfor;
endif;

retp(grid);
endp;
