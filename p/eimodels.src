/*
**  This archive is part of the program EI
**  (C) Copyright 1995-2001 Gary King
**  All Rights Reserved.
**
** Bayesian Model Averaging procedures, 
** by Kosuke Imai and Gary King
*/
/*
** dbres = eimodels_def(nbuf, num, t, x, n, Zb, Zw);
**  
**    adds a data buffer, called mod_d1, mod_d2, etc., 
**    which contains a given model specification to the nested data
**    buffer bdres.
**
** OUTPUT:
** dbres = updated data buffer containing an additional model
**         specification, and any previous data buffers nbuf contained; and
**         titl="*MDB* Meta-Data Buffer from eimodels_def() *MDB*"
**         if there is an error, it returns "".
**   
** INPUTS:
**    nduf = a data buffer to which the model specification should be added
**    num = a scalar, the model number.
**    t,x,n,Zb,Zw = usual inputs for ei().
*/
proc eimodels_def(ndbuf, num, t, x, n, Zb, Zw);
  local tst, temp;

  /* data inputs */
  _Eres=vput(_Eres,t,"t");
  _Eres=vput(_Eres,x,"x");
  _Eres=vput(_Eres,n,"n"); 
  _Eres=vput(_Eres,Zb,"Zb");
  _Eres=vput(_Eres,Zw,"Zw");
  
  /* essential globals */
  _Eres=vput(_Eres,_EalphaB,"_EalphaB");
  _Eres=vput(_Eres,_EalphaW,"_EalphaW");
  _Eres=vput(_Eres,_Ebeta,"_Ebeta");
  _Eres=vput(_Eres,_Ebounds,"_Ebounds");
  _Eres=vput(_Eres,_Ecdfbvn,"_Ecdfbvn");
  _Eres=vput(_Eres,_EdirTol,"_EdirTol");
  _Eres=vput(_Eres,_EcdfTol,"_EcdfTol");
  _Eres=vput(_Eres,_EvTol,"_EvTol");
  _Eres=vput(_Eres,_EdoML,"_EdoML");
  _Eres=vput(_Eres,_EdoML_phi,"doml_phi");    @ **  @
  _Eres=vput(_Eres,_EdoML_vcphi,"doml_vc");   @ **  @
  _Eres=vput(_Eres,_EdoSim,"_EdoSim");
  _Eres=vput(_Eres,_Eeta,"_Eeta");
  _Eres=vput(_Eres,_Eigraph_bvsmth,"bvsmth"); @ **  @
  _Eres=vput(_Eres,_EisChk,"_EisChk");
  _Eres=vput(_Eres,_EiLliks,"_EiLliks");
  _Eres=vput(_Eres,_EisFac,"_EisFac");
  _Eres=vput(_Eres,_Eisn,"_Eisn");
  _Eres=vput(_Eres,_Eist,"_Eist");
  _Eres=vput(_Eres,_EmaxIter,"EmaxIter");     @ **  @
  _Eres=vput(_Eres,_EnonEval,"_EnonEva");     @ **  @
  _Eres=vput(_Eres,_EnonNumInt,"_EnonNum");   @ **  @
  _Eres=vput(_Eres,_EnonPar,"_EnonPar");
  _Eres=vput(_Eres,_EnumTol,"_EnumTol");
  _Eres=vput(_Eres,_Erho,"_Erho");
  _Eres=vput(_Eres,_Eselect,"_Eselect");
  _Eres=vput(_Eres,_EselRnd,"_EselRnd");
  _Eres=vput(_Eres,_Esigma,"_Esigma");
  _Eres=vput(_Eres,_Esims,"_Esims");
  _Eres=vput(_Eres,_Estval,"_Estval");
  _Eres=vput(_Eres,_ei_vc,"_ei_vc");

  /** inessential globals **/
  _Eres=vput(_Eres,_Eprt,"_Eprt");
  _Eres=vput(_Eres,_Echeck,"_Echeck");

  /** check inputs **/
  if _Echeck;
    tst = checkinputs;
    if tst$/="";
      tst;
      "----- EIMODELS_DEF Aborted -----";
      retp("");
    elseif _Eprt>0;
      "Inputs ok...";
    endif;
  endif;

  /** name the buffer and store it in the nested buffer **/
  if ndbuf$=="";
    temp=0;
  else;
    temp=vin(ndbuf,"mod_d"$+ftos(num,"*.*lf",1,0));
  endif;
  if _Eprt/=0;
    if temp==1;
      "Model " num " exists in the input data buffer.";
      "Overwriting the existing specification...";
      ?;
    else;
      "Model " num "is successfully added to the output data buffer.";
      ?;
    endif;
  endif; 

  ndbuf=vput(ndbuf,_Eres,"mod_d"$+ftos(num,"*.*lf",1,0));  
  ndbuf=vput(ndbuf,"*MDB* Meta-Data Buffer from eimodels_def() *MDB*","titl"); 
  retp(ndbuf);
endp;


/*
** dbuf = eimodels_run(ndbuf);
** 
** This proc runs ei() for each of the models stored in a nested 
** data buffer created by eimodels_def (with elements mod_r1, mod_r2,...); the
** output is another nested buffer which has the results for all the ei()
** runs.
** 
** OUTPUT:
**   dbuf = nested data buffer with the results of ei() runs of
**          all the models. If there is an error, it returns "".
**
** INPUT:
**   ndbuf = nested data buffer from eimodels_def() which contains all
**           the globals for each model.
**           titl="*MDB* Meta-Data Buffer from eimodels_run() *MDB*"
**
** GLOBAL:
**   _EImodels_save = file name if you want to save the results at 
**           each iteration in a data buffer (assuming
**           extension ".fmt") on the disk (default = no save).
**
*/
proc eimodels_run(ndbuf);
  local et, i, num, dta, simpars, dbres, titl, t, x, n, zb, zw;

  et=hsec;	@ timing start @
  if _Eprt/=0;
  ?;
  "----- EIMODELS_RUN Begins -----";
  ?;  
  endif;   

  @ check _EImodels_save @
  if type(_EImodels_save)/=13;
    "eimodels: _EImodels_save should be a string.";
    "----- EIMODELS_RUN Aborted -----";
    retp("");
  endif;

  @ checking the input buffer @
  if not(vin(ndbuf,"titl"));
    if _Eprt/=0;
    "WARNING: the input data buffer is not a output buffer from eimodels_def().";
    endif;
  else;
    titl=vread(ndbuf,"titl");
    if titl$/="*MDB* Meta-Data Buffer from eimodels_def() *MDB*";
      if _Eprt/=0;
      "WARNING: the input data buffer is not a output buffer from eimodels_def().";
      endif;
    endif;
  endif;

  dbres=vput(_Eres,"*MDB* Meta-Data Buffer from eimodels_run() *MDB*","titl");

  num = rows(vnamecv(ndbuf));
  i = 1;
  do while i <= num;
    eiset;
    if vin(ndbuf,"mod_d"$+ftos(i+0,"*.*lf",1,0));
      _Eres=vread(ndbuf,"mod_d"$+ftos(i+0,"*.*lf",1,0));
      t=vread(_Eres,"t"); x=vread(_Eres,"x"); n=vread(_Eres,"n"); 
      zb=vread(_Eres,"zb"); zw=vread(_Eres,"zw");
      vreadall(_Eres);
      ?;
      "Running EI for the Model" i " ...";
      ?;
      _Eres=ei(t,x,n,zb,zw);
      dbres=vput(dbres,_Eres,"mod_r"$+ftos(i+0,"*.*lf",1,0));

      @ save the buffer @
      if _EImodels_save $/= "";
        ?;
        "Saving the results for the Model" i " on the disk...";
        ?;
        save ^_EImodels_save=dbres;  
      endif;
    endif;
    i=i+1;
  endo;  

  if _Eprt/=0;
    ?;  
    et=hsec-et;				@ timing end  @
    fmtt;
    "Done. Time in minutes=";;et/100/60;
    "----- EIMODELS_RUN Completed -----";
    ?;
  endif;
  dbres=vput(dbres,_EImodels_save,"eimsave");   
  _Eres=dbres;
  retp(_Eres);
endp;

/*
** dbres=eimodels_avg(ndbuf)
**
** Bayesian Model Averaging for EI
**
** INPUT:
**  ndbuf  nested data buffer from eimodels_run() which contains multiple data
**         buffers from EI runs.
**      
** OUTPUT:
**   dbres = data buffer containing the following parameters as the
**           result of Bayesian Model Averaging using the Harmonic
**           mean estimator for the marginal likelihoods, and
**           titl="*DB* Data Buffer from eimodels_avg() *DB*"
**           if there is an error, it returns "".
**     t = t used for the estimation; if models use different t's, only t 
**         from the first model is stored and used for eiread() calculation.
**     x = x used for the estimation; if models use different x's, only x 
**         from the first model is stored and used for eiread() calculation.
**     n = n used for the estimation; if models use different n's, only n 
**         from the first model is stored and used for eiread() calculation.     
**     betabs   =  betab draws from its posterior (p x _Esims)
**     betaws   =  betaw draws from its posterior (p x _Esims)
**     mfreq    =  first column contains the model number and the second 
**                 column contains the frequency of posterior sampling 
**                 from each model (# of model x 2)
**     postprob =  first column contains the model number and the second 
**                 column contains the posterior model probabilities 
**                 (# of model x 2)
**     prprob = first column contains the model number and the second 
**              column contains the prior model probability used for 
**              calculation (# of model x 2).
**     margllik =  first column contains the model number and the second 
**                 column contains the marginal log-likelihood for each 
**                 model (# of model x 2)
**  
** GLOBAL:
**   _EI_bma_prior = The discrete prior probability to each model in the 
**                   ascending order of the model number (default = 0 which 
**                   assigns the uniform prior) (# of model x 1).
**
**   _EI_bma_est   = 1 if the Laplace approximation (default) and 2
**                   for the Hamonic mean estimator (an importance sampling
**                   scheme) to estimate the marginal likelihood.
**
*/
proc 1=eimodels_avg(ndbuf);
  local et, sims, num, nobs, temp, dbtemp, dta, margllik, postprob, zi,
        aggs, betabs, betaws, mfreq, ratio, j, titl, t, x, n, eselect,
        frst, prprob, _eprt_temp, tst, vc, tsims0;

  et=hsec;     @ timing start @
  @ checking the input buffer @
  if not(vin(ndbuf,"titl"));
    if _Eprt/=0;
    ?;
    "WARNING: the input data buffer is not a output buffer from eimodels_run().";
    endif;
  else;
    titl=vread(ndbuf,"titl");
    if titl$/="*MDB* Meta-Data Buffer from eimodels_run() *MDB*";
      if _Eprt/=0;
      ?;
      "WARNING: the input data buffer is not a output buffer from eimodels_run().";
      endif;
    endif;
  endif;

  _eprt_temp=_Eprt;
  _Eprt=0;
  if _Eprt_temp/=0;
    ?;
    "----- EIMODELS_AVG Begins -----";
    ?;
  endif;
  num = rows(vnamecv(ndbuf));  

  @ initialize local parameters @
  margllik = zeros(num,2);  
  sims = zeros(num,1);

  @ calculate the estimate of marginal likelihood for each model @
  j=zeros(num,1); @ counter @
  for i (1,num,1); 
    clear dbtemp,dta;
    if vin(ndbuf,"mod_r"$+ftos(i+0,"*.*lf",1,0));
      dbtemp=vread(ndbuf,"mod_r"$+ftos(i+0,"*.*lf",1,0));
      "Estimating the marginal likelihood for Model" i;

      if sumc(j)==0;
        nobs = eiread(vread(ndbuf,"mod_r"$+ftos(i+0,"*.*lf",1,0)),"nobs");
        t = eiread(vread(ndbuf,"mod_r"$+ftos(i+0,"*.*lf",1,0)),"t");
        x = eiread(vread(ndbuf,"mod_r"$+ftos(i+0,"*.*lf",1,0)),"x");         
        n = eiread(vread(ndbuf,"mod_r"$+ftos(i+0,"*.*lf",1,0)),"n");
        eselect = eiread(vread(ndbuf,"mod_r"$+ftos(i+0,"*.*lf",1,0)),"_Eselect");
        frst = i;         
      else;
        temp = eiread(dbtemp,"nobs");
        if (temp /= nobs);
          ?;
          "eimodels: This Model uses a different number of observations than Model " frst;
          "You cannot average the models with different number of observations.";
          "----- EIMODELS_AVG Aborted -----";
          ?;
          retp("");
        endif;
        temp = eiread(dbtemp,"t");
        if sumc(temp ./= t)>0;
          ?;
          "WARNING: The ei input, t, of Model " i " is different from Model " frst;
          "Are you sure you want to average models based on different t?";
          "t from Model " frst " is stored in the output data buffer and"; 
          "will be used for eiread() calculation.";
          ?;
        endif;
        temp = eiread(dbtemp,"x");
        if sumc(temp ./= x)>0;
          ?;
          "WARNING: The ei input, x, of Model " i " is different from Model " frst;
          "Are you sure you want to average models based on different x?";
          "n from Model " frst " is stored in the output data buffer and";
          "will be used for eiread() calculation.";
          ?;
        endif;
        temp = eiread(dbtemp,"n");
        if sumc(temp ./= n)>0;
          ?;
          "eimodels: The ei input, n, of Model " i " is different from Model " frst;
          "You cannot average the models using different n.";
          "----- EIMODELS_AVG Aborted -----";
          ?;
          retp("");
        endif;
        temp = eiread(dbtemp,"_Eselect");
        if sumc(temp ./= eselect)>0;
          ?;
          "eimodels: The value of the global, _Eselect, of Model " i " is different from Model " frst;
          "You cannot average the models using different values of _Eselect.";
          "----- EIMODELS_AVG Aborted -----";
          ?;
          retp("");
        endif;
        temp=eiread(dbtemp,"_ei_vc");
        if _EI_bma_est == 1 and temp[eiread(dbtemp,"ghactual"),1]==-1;
          ?;
          "eimodels: EI for Model " frst " did not calculate the variance covariance matrix";
          "(_EI_vc={-1 0} option was used). You cannot use the Laplace approximation";
          "in this case. Choose the harmonic mean estimator (_EI_bma_est=2) and try again."; 
          "----- EIMODELS_AVG Aborted -----";
          ?;
          retp("");
        endif;
      endif; 

      /* estimating the marginal likelihood */
      if _EI_bma_est == 1;
        @ Laplace approximation (unnormalized) @
        vc=eiread(dbtemp,"vcphi");
        temp=(2*pi)^(0.5*rows(vc))*sqrt(det(vc))*exp(eiread(dbtemp,"loglik"));
        if _Eprt_temp/=0;
          "using the Laplace approximation..."; 
          ?;
        endif;
      elseif _EI_bma_est == 2;
        @ harmonic mean estimator (unnormalized) @
        temp=1/(sumc(1/exp(eiread(dbtemp,"lliksims")))/eiread(dbtemp,"_Esims"));
        if _Eprt_temp/=0;
          "using the harmonic mean estimator..."; 
          ?;
        endif;
      else;
        ?;
        "eimodels: an invalid value for _EI_bma_est.";
        "----- EIMODELS_AVG Aborted -----";
        ?;
        retp("");
      endif;     

      /* check the conditional maximization and marginal likelihood */
      if not(in(eiread(dbtemp,"retcode"),0|3333,1));
        ?;
        "WARNING: The value of retcode for Model " i " is not zero: problem with";
        "         the conditional likelihood maximization (retcode =" temp ").";
        "         This model is excluded from model averaging.";
        ?;
      elseif scalmiss(eiread(dbtemp,"lnir"));
        ?;
        "WARNING: The value of lnir for Model " i " is missing: problem with";
        "         the conditional likelihood maximization (retcode =" temp ").";
        "         This model is excluded from model averaging.";
        ?;        
      elseif temp<=0;
        ?;
        "WARNING: The marginal likelihood of Model " i " is not positive.";
        "         This model is excluded from model averaging. Check";
        "         the fit of the model and change its specification.";
        ?;
      else;
        margllik[i,1]=i;
        margllik[i,2]=temp;
        sims[i]=eiread(dbtemp,"_Esims");
        j[i]=1;
      endif;
    endif;
  endfor;
  margllik=selif(margllik,j);
  sims=selif(sims,j);
  j=sumc(j);
  prprob=0*margllik;

  /* check the prior model probabilities */
  if _EI_bma_prior==0;
    prprob[.,2] = ones(j,1)/j;
  else;
    ?;
    if rows(_EI_bma_prior) /= j;
      ?;
      "eimodels: The dimension of the prior model probability does not match";
      "          the number of models to be averaged. Set the global variable";
      "          _EI_bma_prior, which is a (# of model) x 1 vector, appropriately.";
      "----- EIMODELS_AVG Aborted -----";
      ?;
      retp("");
    elseif sumc(_EI_bma_prior) /= 1;
      ?;
      "eimodels: The prior model probability does not sum up to 1.";
      "----- EIMODELS_AVG Aborted -----";
      ?;
      retp("");
    elseif sumc(_EI_bma_prior .< 0) > 0;
      ?;
      "eimodels: Some prior model probabilities are negative.";
      "----- EIMODELS_AVG Aborted -----";
      ?;
      retp("");
    elseif sumc(_EI_bma_prior .> 1) > 0;
      ?;
      "eimodels: Some prior model probabilities are greater than 1.";
      "----- EIMODELS_AVG Aborted -----";
      ?;
      retp("");
    endif;
    prprob[.,2] = _EI_bma_prior;
  endif;
  _Eprt=_eprt_temp;

  @ posterior model probability with flat model prior @
  postprob = margllik;
  postprob[.,2] = margllik[.,2].*prprob[.,2]/sumc(margllik[.,2].*prprob[.,2]);   
  margllik[.,2] = log(margllik[.,2]);             @ the marginal log-likelihood @

  @ initialize more local parameters @
  sims = minc(sims);         @ minimum number of simulations @
  aggs = zeros(sims,2);
  betabs = zeros(nobs,sims);
  betaws = zeros(nobs,sims);
  tsims0 = zeros(nobs,sims);
  mfreq = margllik[.,1] ~ zeros(j,1);

  @ resampling parameter values with posterior model probabilities @
  if _Eprt/=0;
    ?;
    "Sampling Betas from the averaged posterior distribution...";
    ?;
  endif;
  for k (1,sims,1); 
    zi = 1;
    ratio = rndu(1,1);
    do while ratio>sumc(postprob[1:zi,2]);
     zi = zi+1;  @ record the model from which the parameters are drawn @
    endo;
    mfreq[zi,2] = mfreq[zi,2]+1;
    dbtemp = vread(ndbuf,"mod_r"$+ftos(mfreq[zi,1]+0,"*.*lf",1,0));
    temp = eiread(dbtemp,"aggs");
    aggs[k,1] = temp[k,1];
    aggs[k,2] = temp[k,2];
    temp = eiread(dbtemp,"betabs");
    betabs[.,k] = temp[.,k];
    temp = eiread(dbtemp,"betaws");
    betaws[.,k] = temp[.,k];
    temp = eiread(dbtemp,"tsims0");
    tsims0[.,k] = temp[.,k+1];
  endfor;

  if _Eprt/=0;
    et=hsec-et;				@ timing end  @
    fmtt;
    ?;
    "Done. Time in minutes=";;et/100/60;
    "----- EIMODELS_AVG Completed -----";
    ?;
  endif;

  @ store the results in data buffer @
  _Eres = vput(_Eres,"*DB* Data Buffer from eimodels_avg() *DB*","titl"); 
  tst="Run time: "$+datestr(0)$+" "$+timestr(0)$+", "$+_Eversion;
  _Eres=vput(_Eres,tst,"date");
  _Eres = vput(_Eres,t,"t");
  _Eres = vput(_Eres,x,"x");
  _Eres = vput(_Eres,n,"n");
  _Eres = vput(_Eres,_eselect,"_Eselect");
  _Eres = vput(_Eres,aggs,"aggs");
  _Eres = vput(_Eres,betabs,"betabs");
  _Eres = vput(_Eres,betaws,"betaws");
  _Eres = vput(_Eres,tsims0,"tsims0");
  _Eres = vput(_Eres,mfreq,"mfreq");
  _Eres = vput(_Eres,postprob,"postprob");
  _Eres = vput(_Eres,prprob,"prprob");
  _Eres = vput(_Eres,margllik,"margllik");
  
  retp(_Eres);
endp;  
